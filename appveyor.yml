version: 1.0.{build}
configuration: Release
image:
- Visual Studio 2017
environment:
  GitHubOrganisation: MRCollective
  GitHubUsername: MRCollectiveCI
  GitHubPassword:
    secure: hsqKWPKmkjGFHzmoS91a9Q==
services: mssql2014
init:
- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
before_build:
- ps: >-
    nuget restore

    choco install -y --no-progress git.install GitReleaseNotes.Portable GitReleaseManager.Portable
    
    if ($env:APPVEYOR_PROJECT_NAME -eq "ChameleonForms") {

      choco install -y --no-progress aspnetmvc

    }

    if ($env:APPVEYOR_PROJECT_NAME -eq "TortoiseGitToolbar") {

      choco install -y --no-progress tortoisegit
    
      #Registry key for sh.exe isn't created until this runs once (causing a failing test)

      . "C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"

    }

    GitVersion /output buildserver /updateassemblyinfo

    [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | Out-Null


    [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.SqlWmiManagement") | Out-Null


    $serverName = $env:COMPUTERNAME

    $instanceName = 'SQL2014'

    $smo = 'Microsoft.SqlServer.Management.Smo.'

    $wmi = new-object ($smo + 'Wmi.ManagedComputer')


    # Enable TCP/IP

    $uri = "ManagedComputer[@Name='$serverName']/ServerInstance[@Name='$instanceName']/ServerProtocol[@Name='Tcp']"

    $Tcp = $wmi.GetSmoObject($uri)

    $Tcp.IsEnabled = $true

    $TCP.alter()


    # Enable named pipes

    $uri = "ManagedComputer[@Name='$serverName']/ ServerInstance[@Name='$instanceName']/ServerProtocol[@Name='Np']"

    $Np = $wmi.GetSmoObject($uri)

    $Np.IsEnabled = $true

    $Np.Alter()


    Set-Service SQLBrowser -StartupType Manual

    Start-Service SQLBrowser

    Start-Service "MSSQL`$$instanceName"

    Write-Output "Waiting for all active installations to finish..."

    if ($env:APPVEYOR_PROJECT_NAME -eq "TortoiseGitToolbar") {

      do {
    
        $msitest = Get-Process -ProcessName msiexec -ErrorAction SilentlyContinue

        if ($msitest) {

          Start-Sleep -Seconds 60

        }
    
      }

      until (!$msitest)

    }

    Write-Output "Verified all installations have finished."
build:
  parallel: true
  verbosity: minimal
after_build:
- ps: >-
    Get-ChildItem -Recurse *.nuspec | foreach { nuget pack $_.FullName -Properties "Configuration=Release;Platform=AnyCPU" -Symbols -Version $Env:GitVersion_NuGetVersion }

    $currentTag = git tag -l --points-at HEAD

    $HTTP_Request = [System.Net.WebRequest]::Create("https://api.github.com/repos/$env:GitHubOrganisation/$env:APPVEYOR_PROJECT_NAME/releases/tags/$Env:GitVersion_NuGetVersion")

    $HTTP_Request.UserAgent = "Powershell"

    try {

      $HTTP_Request.GetResponse()

    } catch [Net.WebException] { 

        [System.Net.HttpWebResponse] $resp = [System.Net.HttpWebResponse] $_.Exception.Response  

        if ($currentTag -And $resp.StatusCode -eq 404) {

          $env:SHOULD_DEPLOY = 'true'

        }

    }

    GitReleaseNotes.exe . /OutputFile ReleaseNotes.md

    Write-Output "The following would become the GitHub release notes if this package is released:"

    Get-Content .\ReleaseNotes.md
test:
  assemblies:
    only:
      - '**\*.*Tests.dll'
artifacts:
- path: '*.nupkg'
- path: ReleaseNotes.md
deploy:
- provider: NuGet
  api_key:
    secure: PUn5bO0imZIO/nDzc1HnL4Xs4wKDUjqWfhNb38QL9ETn+uZ+ciBhHKIqIUFNK85t
  on:
    SHOULD_DEPLOY: true
after_deploy:
- cmd: >-
    GitReleaseManager.exe create -i ReleaseNotes.md -o %GitHubOrganisation% -u %GitHubUsername% -p %GitHubPassword% -r %APPVEYOR_PROJECT_NAME% -c master -n %GitVersion_NuGetVersion%

    GitReleaseManager.exe publish -t %GitVersion_NuGetVersion% -o %GitHubOrganisation% -u %GitHubUsername% -p %GitHubPassword% -r %APPVEYOR_PROJECT_NAME%
notifications:
- provider: GitHubPullRequest
  on_build_success: true
  on_build_failure: true
  on_build_status_changed: false
on_finish:
- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))